//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/400_Scripts/410_Player/PlayerActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActionMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActionMap"",
    ""maps"": [
        {
            ""name"": ""Gamepad"",
            ""id"": ""c866f438-9a08-4a10-b9f9-8d7cf7931380"",
            ""actions"": [
                {
                    ""name"": ""Strenght Modifier"",
                    ""type"": ""Value"",
                    ""id"": ""8d08072b-487d-40f7-a5ed-b6b0bf5aad5a"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Arrow Direction"",
                    ""type"": ""Value"",
                    ""id"": ""f96633d4-39bb-47a5-9995-ba42fe8c2439"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Throw Player"",
                    ""type"": ""Button"",
                    ""id"": ""f547db76-7812-46c1-9c7b-f21f8c3fe600"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Player"",
                    ""type"": ""Button"",
                    ""id"": ""136f32b3-d8cc-4b14-9490-a086afa7ea0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FreeCam"",
                    ""type"": ""Value"",
                    ""id"": ""6e498595-ef1d-4369-8e0e-cca9abb5876c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""37bd6269-11db-4271-ae72-51eed6d92008"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strenght Modifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f87ae14-2ef3-448a-b499-ad1e9610afd6"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""12bf4a18-83be-4bd7-9d4a-b13f005d0ae4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Player"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""140aaa1a-351a-4b8c-9529-7d6d0727ac3a"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""131af53e-b405-4b98-ad4f-feb8b55369af"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3cd52645-d479-4a58-8e92-f32b76a4e43f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12ce6811-e713-4062-ab39-a32b5b33878b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FreeCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cheat"",
            ""id"": ""0ccd1fb2-2384-4316-aa70-6f133026c6e2"",
            ""actions"": [
                {
                    ""name"": ""Reload Scene"",
                    ""type"": ""Button"",
                    ""id"": ""6e714593-840a-467e-91f6-ecbefae76fdd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""No-Clip"",
                    ""type"": ""Button"",
                    ""id"": ""9ed9e3d5-dbb1-4d59-9ba5-9b55a1220681"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""No-Clip Control"",
                    ""type"": ""Value"",
                    ""id"": ""e6a7a912-7270-407f-9efe-076ddbf7be8f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dc736d58-ed1b-4f32-b4bb-06a8a9ff11fd"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload Scene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f418a2b6-7ac7-4d18-9692-0a4782b15491"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""No-Clip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02ac39ac-505b-4e67-a967-304219bdc89c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""No-Clip Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gamepad
        m_Gamepad = asset.FindActionMap("Gamepad", throwIfNotFound: true);
        m_Gamepad_StrenghtModifier = m_Gamepad.FindAction("Strenght Modifier", throwIfNotFound: true);
        m_Gamepad_ArrowDirection = m_Gamepad.FindAction("Arrow Direction", throwIfNotFound: true);
        m_Gamepad_ThrowPlayer = m_Gamepad.FindAction("Throw Player", throwIfNotFound: true);
        m_Gamepad_SelectPlayer = m_Gamepad.FindAction("Select Player", throwIfNotFound: true);
        m_Gamepad_FreeCam = m_Gamepad.FindAction("FreeCam", throwIfNotFound: true);
        // Cheat
        m_Cheat = asset.FindActionMap("Cheat", throwIfNotFound: true);
        m_Cheat_ReloadScene = m_Cheat.FindAction("Reload Scene", throwIfNotFound: true);
        m_Cheat_NoClip = m_Cheat.FindAction("No-Clip", throwIfNotFound: true);
        m_Cheat_NoClipControl = m_Cheat.FindAction("No-Clip Control", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gamepad
    private readonly InputActionMap m_Gamepad;
    private List<IGamepadActions> m_GamepadActionsCallbackInterfaces = new List<IGamepadActions>();
    private readonly InputAction m_Gamepad_StrenghtModifier;
    private readonly InputAction m_Gamepad_ArrowDirection;
    private readonly InputAction m_Gamepad_ThrowPlayer;
    private readonly InputAction m_Gamepad_SelectPlayer;
    private readonly InputAction m_Gamepad_FreeCam;
    public struct GamepadActions
    {
        private @PlayerActionMap m_Wrapper;
        public GamepadActions(@PlayerActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @StrenghtModifier => m_Wrapper.m_Gamepad_StrenghtModifier;
        public InputAction @ArrowDirection => m_Wrapper.m_Gamepad_ArrowDirection;
        public InputAction @ThrowPlayer => m_Wrapper.m_Gamepad_ThrowPlayer;
        public InputAction @SelectPlayer => m_Wrapper.m_Gamepad_SelectPlayer;
        public InputAction @FreeCam => m_Wrapper.m_Gamepad_FreeCam;
        public InputActionMap Get() { return m_Wrapper.m_Gamepad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamepadActions set) { return set.Get(); }
        public void AddCallbacks(IGamepadActions instance)
        {
            if (instance == null || m_Wrapper.m_GamepadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamepadActionsCallbackInterfaces.Add(instance);
            @StrenghtModifier.started += instance.OnStrenghtModifier;
            @StrenghtModifier.performed += instance.OnStrenghtModifier;
            @StrenghtModifier.canceled += instance.OnStrenghtModifier;
            @ArrowDirection.started += instance.OnArrowDirection;
            @ArrowDirection.performed += instance.OnArrowDirection;
            @ArrowDirection.canceled += instance.OnArrowDirection;
            @ThrowPlayer.started += instance.OnThrowPlayer;
            @ThrowPlayer.performed += instance.OnThrowPlayer;
            @ThrowPlayer.canceled += instance.OnThrowPlayer;
            @SelectPlayer.started += instance.OnSelectPlayer;
            @SelectPlayer.performed += instance.OnSelectPlayer;
            @SelectPlayer.canceled += instance.OnSelectPlayer;
            @FreeCam.started += instance.OnFreeCam;
            @FreeCam.performed += instance.OnFreeCam;
            @FreeCam.canceled += instance.OnFreeCam;
        }

        private void UnregisterCallbacks(IGamepadActions instance)
        {
            @StrenghtModifier.started -= instance.OnStrenghtModifier;
            @StrenghtModifier.performed -= instance.OnStrenghtModifier;
            @StrenghtModifier.canceled -= instance.OnStrenghtModifier;
            @ArrowDirection.started -= instance.OnArrowDirection;
            @ArrowDirection.performed -= instance.OnArrowDirection;
            @ArrowDirection.canceled -= instance.OnArrowDirection;
            @ThrowPlayer.started -= instance.OnThrowPlayer;
            @ThrowPlayer.performed -= instance.OnThrowPlayer;
            @ThrowPlayer.canceled -= instance.OnThrowPlayer;
            @SelectPlayer.started -= instance.OnSelectPlayer;
            @SelectPlayer.performed -= instance.OnSelectPlayer;
            @SelectPlayer.canceled -= instance.OnSelectPlayer;
            @FreeCam.started -= instance.OnFreeCam;
            @FreeCam.performed -= instance.OnFreeCam;
            @FreeCam.canceled -= instance.OnFreeCam;
        }

        public void RemoveCallbacks(IGamepadActions instance)
        {
            if (m_Wrapper.m_GamepadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamepadActions instance)
        {
            foreach (var item in m_Wrapper.m_GamepadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamepadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamepadActions @Gamepad => new GamepadActions(this);

    // Cheat
    private readonly InputActionMap m_Cheat;
    private List<ICheatActions> m_CheatActionsCallbackInterfaces = new List<ICheatActions>();
    private readonly InputAction m_Cheat_ReloadScene;
    private readonly InputAction m_Cheat_NoClip;
    private readonly InputAction m_Cheat_NoClipControl;
    public struct CheatActions
    {
        private @PlayerActionMap m_Wrapper;
        public CheatActions(@PlayerActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @ReloadScene => m_Wrapper.m_Cheat_ReloadScene;
        public InputAction @NoClip => m_Wrapper.m_Cheat_NoClip;
        public InputAction @NoClipControl => m_Wrapper.m_Cheat_NoClipControl;
        public InputActionMap Get() { return m_Wrapper.m_Cheat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CheatActions set) { return set.Get(); }
        public void AddCallbacks(ICheatActions instance)
        {
            if (instance == null || m_Wrapper.m_CheatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CheatActionsCallbackInterfaces.Add(instance);
            @ReloadScene.started += instance.OnReloadScene;
            @ReloadScene.performed += instance.OnReloadScene;
            @ReloadScene.canceled += instance.OnReloadScene;
            @NoClip.started += instance.OnNoClip;
            @NoClip.performed += instance.OnNoClip;
            @NoClip.canceled += instance.OnNoClip;
            @NoClipControl.started += instance.OnNoClipControl;
            @NoClipControl.performed += instance.OnNoClipControl;
            @NoClipControl.canceled += instance.OnNoClipControl;
        }

        private void UnregisterCallbacks(ICheatActions instance)
        {
            @ReloadScene.started -= instance.OnReloadScene;
            @ReloadScene.performed -= instance.OnReloadScene;
            @ReloadScene.canceled -= instance.OnReloadScene;
            @NoClip.started -= instance.OnNoClip;
            @NoClip.performed -= instance.OnNoClip;
            @NoClip.canceled -= instance.OnNoClip;
            @NoClipControl.started -= instance.OnNoClipControl;
            @NoClipControl.performed -= instance.OnNoClipControl;
            @NoClipControl.canceled -= instance.OnNoClipControl;
        }

        public void RemoveCallbacks(ICheatActions instance)
        {
            if (m_Wrapper.m_CheatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICheatActions instance)
        {
            foreach (var item in m_Wrapper.m_CheatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CheatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CheatActions @Cheat => new CheatActions(this);
    public interface IGamepadActions
    {
        void OnStrenghtModifier(InputAction.CallbackContext context);
        void OnArrowDirection(InputAction.CallbackContext context);
        void OnThrowPlayer(InputAction.CallbackContext context);
        void OnSelectPlayer(InputAction.CallbackContext context);
        void OnFreeCam(InputAction.CallbackContext context);
    }
    public interface ICheatActions
    {
        void OnReloadScene(InputAction.CallbackContext context);
        void OnNoClip(InputAction.CallbackContext context);
        void OnNoClipControl(InputAction.CallbackContext context);
    }
}
